{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","className","s","button","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","statisticList","Notification","message","App","useState","setGood","setNeutral","setBad","value","reduce","acc","percent","percentage","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,cAAgB,oC,+JC0CnBC,MAvCf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,QAAS,kBAAMH,EAAgBE,IAC/BE,UAAWC,IAAEC,OAHf,SAKGJ,GAJIA,SCsBAK,MA1Bf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACFC,M,gBC6BMC,MAlCf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAIX,UAAWC,IAAEW,cAAjB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCQSE,MAhBf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC4HEC,MAzHf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KA6BMC,EATG,CAACb,EAAMC,EAASC,GAAKY,QAAO,SAACC,EAAKF,GAAN,OAAgBE,EAAMF,KAUrDG,EAPN,WACE,IAAMC,EAAaC,KAAKC,MAAOnB,EAAOa,EAAS,KAE/C,OAAKI,GAAmB,EAIVG,GAIhB,OACI,sBAAK3B,UAAU,MAAf,UACE,cAAC,EAAD,CAASI,MAAO,wBAAhB,SACE,cAAC,EAAD,CACET,QANQ,CAAC,OAAQ,UAAW,OAO5BC,gBArCc,SAAAE,GACtB,OAAQA,GACN,IAAK,OACHmB,GAAQ,SAAAV,GAAI,OAAIA,EAAO,KACvB,MACF,IAAK,UACHW,GAAW,SAAAV,GAAO,OAAIA,EAAU,KAChC,MACF,IAAK,MACHW,GAAO,SAAAV,GAAG,OAAIA,EAAM,KACpB,MAEF,QACE,aA2BA,cAAC,EAAD,CAASL,MAAM,aAAf,SACa,IAAVgB,EACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,EACPT,mBAAoBY,UCxDlCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cbfaf8f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2hziz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticList\":\"Statistics_statisticList__6JgGa\"};","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport s from '../FeedbackOptions/FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          key={option}\n          onClick={() => onLeaveFeedback(option)}\n          className={s.button}\n        >\n          {option}\n        </button>\n        ))}\n    </div>\n  )\n}\n\n// === class ===\n// class FeedbackOptions extends Component {\n//   render() {\n//     const { options, onLeaveFeedback } = this.props;\n//     return (\n//       <div>\n//         {options.map(option => (\n//           <button\n//             key={option}\n//             onClick={() => onLeaveFeedback(option)}\n//             className={s.button}\n//           >\n//             {option}\n//           </button>\n//         ))}\n//       </div>\n//     );\n//   }\n// }\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n// import s from '../Section/Section.module.css';\n\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n        {children}\n    </section>\n  )\n}\n\n// === class ===\n// class Section extends Component {\n//   render() {\n//     const { title, children } = this.props;\n//     return (\n//       <section>\n//         <h2>{title}</h2>\n//         {children}\n//       </section>\n//     );\n//   }\n// }\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Section;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport s from '../Statistics/Statistics.module.css';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul className={s.statisticList}>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  )\n}\n\n// === class ===\n// class Statistics extends Component {\n//   render() {\n//     const { good, neutral, bad, total, positivePercentage } = this.props;\n//     return (\n//       <ul className={s.statisticList}>\n//         <li>Good: {good}</li>\n//         <li>Neutral: {neutral}</li>\n//         <li>Bad: {bad}</li>\n//         <li>Total: {total}</li>\n//         <li>Positive feedback: {positivePercentage}%</li>\n//       </ul>\n//     );\n//   }\n// }\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n};\n\n// === class ===\n// class Notification extends Component {\n//   render() {\n//     const { message } = this.props;\n//     return <p>{message}</p>;\n//   }\n// }\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;","import { useState } from 'react';\nimport './App.css';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = option => {\n    switch (option) {\n      case 'good':\n        setGood(good => good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral => neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad => bad + 1);\n        break;\n    \n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback=()=>{\n    return [good, neutral, bad].reduce((acc, value) => acc + value);\n  }\n  \n  function countPositiveFeedbackPercentage () {\n    const percentage = Math.round((good / value) * 100);\n    \n    if (!percentage) return 0;\n    return percentage;\n  }\n  const value = countTotalFeedback();\n  const percent = countPositiveFeedbackPercentage();\n  \n  const stateName = ['good', 'neutral', 'bad'];\n\n  return (\n      <div className=\"App\">\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={stateName}\n            onLeaveFeedback={handleIncrement}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {value === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={value}\n              positivePercentage={percent}\n            />\n          )}\n        </Section>\n      </div>\n    );\n}\n\n// === class ===\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   handleIncrement = option => {\n//     this.setState(prevState => {\n//       return { [option]: prevState[option] + 1 };\n//     });\n//   };\n\n//   countTotalFeedback() {\n//     const totalValue = Object.values(this.state);\n//     return totalValue.reduce((acc, value) => acc + value);\n//   }\n\n//   countPositiveFeedbackPercentage() {\n//     const value = this.countTotalFeedback();\n//     const percentage = Math.round((this.state.good / value) * 100);\n\n//     if (!percentage) return 0;\n//     return percentage;\n//   }\n\n//   render() {\n//     const stateName = Object.keys(this.state);\n//     const { good, neutral, bad } = this.state;\n//     const value = this.countTotalFeedback();\n//     const percent = this.countPositiveFeedbackPercentage();\n\n//     return (\n//       <div className=\"App\">\n//         <Section title={\"Please leave feedback\"}>\n//           <FeedbackOptions\n//             options={stateName}\n//             onLeaveFeedback={this.handleIncrement}\n//           />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {value === 0 ? (\n//             <Notification message=\"No feedback given\" />\n//           ) : (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={value}\n//               positivePercentage={percent}\n//             />\n//           )}\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}